<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="af2dc864-8d5e-48bd-889f-a48ed9712f5c" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/domain/product.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/domain/product.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Test Namespace" />
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="GitToolBoxStore">
    <option name="recentBranches">
      <RecentBranches>
        <option name="branchesForRepo">
          <list>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="repository" />
                    <option name="lastUsedInstant" value="1624838632" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1624838376" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="domain_model" />
                    <option name="lastUsedInstant" value="1624838191" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$" />
            </RecentBranchesForRepo>
          </list>
        </option>
      </RecentBranches>
    </option>
  </component>
  <component name="ProjectId" id="1uV2ZLwKAU97S5glI4YAYgUtTtk" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="foldersAlwaysOnTop" value="false" />
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showVisibilityIcons" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="DatabaseDriversLRU" value="h2&#10;postgresql" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="cursive.last.file.extension./home/felipe/cursos/functional-programing/clojure/architecture-patterns-with-clojure/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/src/architecture_patterns_with_clojure/domain" />
    <property name="settings.editor.selected.configurable" value="database.main" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure/e2e" />
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure/integration" />
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure/unit" />
      <recent name="$PROJECT_DIR$/src/architecture_patterns_with_clojure/config" />
      <recent name="$PROJECT_DIR$/src/architecture_patterns_with_clojure/entrypoints" />
    </key>
  </component>
  <component name="ReplState" timestamp="1629768848582">{:repl-history {:ide [], :local [{:command &quot;(-&gt; ['(1 2 3)] (conj '()))&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (conj '(1 2)))&quot;, :offset 29, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (concat '()))&quot;, :offset 28, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (concat '(1 2 3)))&quot;, :offset 33, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (into ()))&quot;, :offset 25, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (into (1 2 )))&quot;, :offset 29, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (into (1 2  3)))&quot;, :offset 31, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (into '(1 2  3)))&quot;, :offset 32, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (conj '(1 2  3)))&quot;, :offset 32, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (conj []))&quot;, :offset 25, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn do-stuff\n  [coll {:keys [map-fn max-num-things batch-size]}]\n  (cond-&gt; coll\n           map-fn         (map map-fn)\n           max-num-things (take max-num-things)\n           batch-size     (partition batch-size)))&quot;, :offset 219, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn do-stuff\n  [coll {:keys [map-fn max-num-things batch-size]}]\n  (cond-&gt;&gt; coll\n           map-fn         (map map-fn)\n           max-num-things (take max-num-things)\n           batch-size     (partition batch-size)))&quot;, :offset 220, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(do-stuff [1 2 3 4] {:map-fn str :batch-size 2})&quot;, :offset 48, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(if (nil? @server)\n   (do (println \&quot;Server starts\&quot;) (start-dev))\n   (restart))&quot;, :offset 78, :ns &quot;architecture-patterns-with-clojure.api&quot;} {:command &quot;(stop-dev)&quot;, :offset 10, :ns &quot;architecture-patterns-with-clojure.api&quot;} {:command &quot;(event \&quot;asa\&quot;)&quot;, :offset 13, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(event {:type :outofstocks})&quot;, :offset 28, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(event {:type :outofstock})&quot;, :offset 27, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(event :outofstock)&quot;, :offset 19, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defmethod event :outofstock [params] (println \&quot;out \&quot; params))&quot;, :offset 62, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(event  :outofstock)&quot;, :offset 20, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defmethod event :outofstock [_ params] (println \&quot;out \&quot; params))&quot;, :offset 64, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(event  :outofstock \&quot;\&quot;)&quot;, :offset 23, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defmulti example-multimethod\n          (fn [arg-one opts] arg-one))&quot;, :offset 68, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defmethod example-multimethod :path-one [_ opts]\n  (println (:first-opt opts)))&quot;, :offset 80, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defmethod example-multimethod :path-two [_ opts]\n  (println (:second-opt opts)))&quot;, :offset 81, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(example-multimethod :path-one {:first-opt 1\n                                :second-opt 2})&quot;, :offset 92, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ns-unmap event)&quot;, :offset 16, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defmulti event (fn [type args] type))&quot;, :offset 38, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defmethod event :out [_ params] (println \&quot;out \&quot; params))&quot;, :offset 57, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(event  :out \&quot;\&quot;)&quot;, :offset 16, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(event  :out \&quot;asa\&quot;)&quot;, :offset 19, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ns-unmap *ns* 'event)&quot;, :offset 22, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defrecord OutOfStock [sku])&quot;, :offset 28, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(OutOfStock. \&quot;sku1\&quot;)&quot;, :offset 20, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(:sku (OutOfStock. \&quot;sku1\&quot;))&quot;, :offset 27, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(:class (OutOfStock. \&quot;sku1\&quot;))&quot;, :offset 29, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(class (OutOfStock. \&quot;sku1\&quot;))&quot;, :offset 28, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ns architecture-patterns-with-clojure.domain.product\n  (:require [architecture-patterns-with-clojure.util.exception :refer [make-ex-info]]\n            [architecture-patterns-with-clojure.domain.batch :as batch]\n            [architecture-patterns-with-clojure.util.date :as date])\n            [architecture-patterns-with-clojure.domain.events :as events]\n  (:import (clojure.lang ArityException)))&quot;, :offset 397, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(map-&gt;OutOfStock {:sku 1})&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(map-&gt;OutOfStock {:sku 1 :abc 2})&quot;, :offset 33, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(class OutOfStock)&quot;, :offset 18, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(methods OutOfStock)&quot;, :offset 20, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ns architecture-patterns-with-clojure.domain.product\n  (:require [architecture-patterns-with-clojure.util.exception :refer [make-ex-info]]\n            [architecture-patterns-with-clojure.domain.batch :as batch]\n            [architecture-patterns-with-clojure.util.date :as date]\n            [architecture-patterns-with-clojure.domain.events :as events])\n  (:import (clojure.lang ArityException)))&quot;, :offset 397, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(ns architecture-patterns-with-clojure.service-layer.message-bus\n  (:require [architecture-patterns-with-clojure.domain.events :as events]))&quot;, :offset 140, :ns &quot;architecture-patterns-with-clojure.domain.product&quot;} {:command &quot;events/OutOfStock&quot;, :offset 17, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defn handle [event]\n  (apply handlers event))&quot;, :offset 46, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(handle (events/-&gt;OutOfStock \&quot;ola\&quot;))&quot;, :offset 36, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defmulti handlers class)&quot;, :offset 25, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(class java.util.HashMap)&quot;, :offset 25, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(class (java.util.HashMap. ))&quot;, :offset 29, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(ns-unmap *ns* *)&quot;, :offset 17, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(ns-unmap *ns* .)&quot;, :offset 17, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(ns-unmap *ns* 'handlerss)&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(ns-unmap *ns* 'handlers)&quot;, :offset 25, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(= (class (events/-&gt;OutOfStock \&quot;a\&quot;)) events/-&gt;OutOfStock )&quot;, :offset 58, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;events/-&gt;OutOfStock&quot;, :offset 19, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(class events/-&gt;OutOfStock)&quot;, :offset 27, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(OutOfStock)&quot;, :offset 12, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;OutOfStock&quot;, :offset 10, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(= (class (events/-&gt;OutOfStock \&quot;a\&quot;)) OutOfStock )&quot;, :offset 49, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(class (events/-&gt;OutOfStock \&quot;\&quot;))&quot;, :offset 32, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(type (events/-&gt;OutOfStock \&quot;\&quot;))&quot;, :offset 31, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(def ^{:type \&quot;ola\&quot;} out (events/-&gt;OutOfStock \&quot;b\&quot;))&quot;, :offset 50, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(def ^{:type ::ola} out (events/-&gt;OutOfStock \&quot;b\&quot;))&quot;, :offset 50, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(def  out ^{:type ::ola} (events/-&gt;OutOfStock \&quot;b\&quot;))&quot;, :offset 51, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(type out)&quot;, :offset 10, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(def handlers {\n               OutOfStock [send-out-of-stock-notification] \n               })&quot;, :offset 93, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defn handle [event]\n  (get handlers (class event)))&quot;, :offset 52, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(handle (events/-&gt;OutOfStock \&quot;kas\&quot;))&quot;, :offset 36, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defmethod handlers :default [_] \&quot;opa\&quot;)&quot;, :offset 39, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defmethod handlers :default [_] [])&quot;, :offset 36, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defmethod handlers :default [e] [(println \&quot;can't handle with\&quot; e)])&quot;, :offset 67, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defmethod handlers :default [e] [#(println \&quot;can't handle with\&quot; e)])&quot;, :offset 68, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defmethod handlers :default [_] [#(println \&quot;can't handle with\&quot; %)])&quot;, :offset 68, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(handle \&quot;olsa\&quot;)&quot;, :offset 15, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(class (events/-&gt;OutOfStock \&quot;\&quot; ))&quot;, :offset 33, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(class events/-&gt;OutOfStock )&quot;, :offset 28, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(type events/-&gt;OutOfStock )&quot;, :offset 27, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(type events/map-&gt;OutOfStock )&quot;, :offset 30, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(type OutOfStock )&quot;, :offset 18, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(ns architecture-patterns-with-clojure.service-layer.message-bus\n  (:require [architecture-patterns-with-clojure.domain.events :as events])\n  (:import (architecture-patterns-with-clojure.domain.events OutOfStock)))&quot;, :offset 214, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(ns architecture-patterns-with-clojure.service-layer.message-bus\n  (:require [architecture-patterns-with-clojure.domain.events :as events])\n  (:import (architecture.patterns.with.clojure.domain.events OutOfStock)))&quot;, :offset 214, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(ns architecture-patterns-with-clojure.service-layer.message-bus\n  (:require [architecture-patterns-with-clojure.domain.events :as events])\n  (:import (architecture_patterns_with_clojure.domain.events OutOfStock)))&quot;, :offset 214, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defmethod handlers OutOfStock [_] [send-out-of-stock-notification])&quot;, :offset 68, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(handle (events/-&gt;OutOfStock \&quot;kasasas\&quot;))&quot;, :offset 40, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(handle \&quot;ol\&quot;)&quot;, :offset 13, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(apply (fn [x] (println x)) [1])&quot;, :offset 32, :ns &quot;architecture-patterns-with-clojure.service-layer.service&quot;} {:command &quot;(apply (fn [x] (println x)) [1 2 3])&quot;, :offset 36, :ns &quot;architecture-patterns-with-clojure.service-layer.service&quot;} {:command &quot;(last [])&quot;, :offset 9, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(last [1])&quot;, :offset 10, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defn handle [events]\n  (loop [event (last events)]\n    (when event\n      (for [f (handlers event)] (f event))\n      (recur (drop-last events)))\n    )\n  )&quot;, :offset 154, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(handle [])&quot;, :offset 11, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(handle [1])&quot;, :offset 12, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(last (drop-last [1]))&quot;, :offset 22, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defn handle [events]\n  (loop [event (last events)]\n    (when event\n      (println event)\n      (for [f (handlers event)] (f event))\n      (recur (drop-last events)))\n    )\n  )&quot;, :offset 176, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defn handle [[event &amp; events]]\n  ;(loop [event (last events)]\n    (when event\n      (println event)\n      (for [f (handlers event)] (f event))\n      (recur (drop-last events)))\n    ;)\n  )&quot;, :offset 188, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(handle [1 2 3])&quot;, :offset 16, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(println \&quot;ola\&quot;)&quot;, :offset 15, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(println \&quot;olaa\&quot;)&quot;, :offset 16, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.REPL for architecture-patterns-with-clojure">
    <configuration name="REPL for architecture-patterns-with-clojure" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <setting name="displayName" value="REPL for architecture-patterns-with-clojure" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="Run tests in architecture-patterns-with-clojure.repository-test" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="namespace" value="architecture-patterns-with-clojure.repository-test" />
      <option name="selector" value="SINGLE_NS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.api-test/test-allocate" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.api-test/test-allocate" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.batches_test/test-batches" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.batches_test/test-batches" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.repository-test/test-repository" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.repository-test/test-repository" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for architecture-patterns-with-clojure" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.api-test/test-allocate" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.batches_test/test-batches" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.repository-test/test-repository" />
        <item itemvalue="clojure.test.Run tests in architecture-patterns-with-clojure.repository-test" />
      </list>
    </recent_temporary>
  </component>
  <component name="SQLScriptSettings">
    <option name="matrix">
      <map>
        <entry key="POSTGRES.CreateComplete" value="CreateIfNotExists=1" />
      </map>
    </option>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="af2dc864-8d5e-48bd-889f-a48ed9712f5c" name="Default Changelist" comment="" />
      <created>1624736489572</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1624736489572</updated>
      <workItem from="1624736490822" duration="60000" />
      <workItem from="1624736569607" duration="2093000" />
      <workItem from="1624738688365" duration="27330000" />
      <workItem from="1624833676964" duration="4441000" />
      <workItem from="1624918654038" duration="1985000" />
      <workItem from="1624925128169" duration="3876000" />
      <workItem from="1624929556891" duration="11016000" />
      <workItem from="1624968549520" duration="3753000" />
      <workItem from="1625055661264" duration="6409000" />
      <workItem from="1625373029569" duration="1409000" />
      <workItem from="1625400488046" duration="1289000" />
      <workItem from="1625423035465" duration="15885000" />
      <workItem from="1626372351494" duration="4572000" />
      <workItem from="1626484821722" duration="301000" />
      <workItem from="1626734078929" duration="2474000" />
      <workItem from="1626736711983" duration="1000" />
      <workItem from="1626833689751" duration="194000" />
      <workItem from="1627780863183" duration="2281000" />
      <workItem from="1627784121954" duration="1645000" />
      <workItem from="1627817206950" duration="18000" />
      <workItem from="1627840272907" duration="25461000" />
      <workItem from="1629242024535" duration="44000" />
      <workItem from="1629306911643" duration="12405000" />
      <workItem from="1629379637121" duration="646000" />
      <workItem from="1629457366553" duration="26782000" />
      <workItem from="1629566724744" duration="15510000" />
      <workItem from="1629633970264" duration="35054000" />
      <workItem from="1629719845961" duration="33698000" />
      <workItem from="1629809603377" duration="1926000" />
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
</project>