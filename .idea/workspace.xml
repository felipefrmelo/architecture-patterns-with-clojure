<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="af2dc864-8d5e-48bd-889f-a48ed9712f5c" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_h2database_h2_1_4_200.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_mchange_c3p0_0_9_5_2.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_mchange_mchange_commons_java_0_2_11.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_java_jdbc_0_7_12.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_postgresql_postgresql_42_1_4.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/architecture-patterns-with-clojure.iml" beforeDir="false" afterPath="$PROJECT_DIR$/architecture-patterns-with-clojure.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/database.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/model.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/repository.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/util/date.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/util/exception.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/batches_test.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/fixtures.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/model_test.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/repository_test.clj" beforeDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
        <option value="Clojure Test Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="GitToolBoxStore">
    <option name="recentBranches">
      <RecentBranches>
        <option name="branchesForRepo">
          <list>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="abstractions" />
                    <option name="lastUsedInstant" value="1625444027" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1625443997" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="repository" />
                    <option name="lastUsedInstant" value="1624838632" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="domain_model" />
                    <option name="lastUsedInstant" value="1624838191" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$" />
            </RecentBranchesForRepo>
          </list>
        </option>
      </RecentBranches>
    </option>
  </component>
  <component name="ProjectId" id="1uV2ZLwKAU97S5glI4YAYgUtTtk" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="flattenPackages" value="true" />
    <option name="foldersAlwaysOnTop" value="false" />
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showVisibilityIcons" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="DatabaseDriversLRU" value="h2&#10;postgresql" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="cursive.last.file.extension./home/felipe/cursos/functional-programing/clojure/architecture-patterns-with-clojure/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="settings.editor.selected.configurable" value="database.main" />
  </component>
  <component name="ReplState" timestamp="1625460430718">{:repl-history {:ide [], :local [{:command &quot;(jdbc/insert! db-spec :fruit {:col1 42 :col2 \&quot;123\&quot;})&quot;, :offset 52, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query   db-spec [\&quot;SELECT * FROM fruit WHERE id = ?\&quot; 13])&quot;, :offset 62, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query   db-spec [\&quot;SELECT * FROM fruit WHERE name = ?\&quot; cbc])&quot;, :offset 65, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def fruit-table-ddl\n  (jdbc/create-table-ddl :fruit\n                         [[:name \&quot;varchar(32)\&quot;]\n                          [:appearance \&quot;varchar(32)\&quot;]\n                          [:cost :int]\n                          [:grade :real]]))\n&quot;, :offset 238, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:~/test\&quot;})&quot;, :offset 91, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test\&quot;})&quot;, :offset 93, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :jdbc-url     \&quot;jdbc:h2:men:test\&quot;})&quot;, :offset 98, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;:url&quot;, :offset 4, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/get-connection datasource-options)&quot;, :offset 40, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(defonce db\n         (delay (hikari/make-datasource datasource-options)))&quot;, :offset 73, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(ns architecture-patterns-with-clojure.core\n  (:require [clojure.java.jdbc :as jdbc]\n            [hikari-cp.core :as hikari]))&quot;, :offset 126, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query   db-spec [\&quot;SELECT * FROM fruit WHERE name = ?\&quot; \&quot;cbc\&quot;])&quot;, :offset 67, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test\&quot;\n                         :mode \&quot;PostgreSQL\&quot; })&quot;, :offset 138, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test\&quot;\n                         :mode \&quot;PostgreSQsL\&quot; })&quot;, :offset 139, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test;mode=PostgreSQsL\&quot;\n                         :mode \&quot;PostgreSQsL\&quot; })&quot;, :offset 156, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(.close db-spec)&quot;, :offset 16, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(hikari/close-datasource 'db-spec)&quot;, :offset 34, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test;MODE=PostgreSQsL;DATABASE_TO_LOWER=TRUE\&quot;\n                         :mode \&quot;PostgreSQsL\&quot; })&quot;, :offset 179, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec\n          (hikari/make-datasource datasource-options))&quot;, :offset 67, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE\&quot;\n                         :mode \&quot;PostgreSQsL\&quot; })&quot;, :offset 178, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE\&quot;\n                         ;:mode \&quot;PostgreSQsL\&quot; \n                         })&quot;, :offset 205, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test\&quot;\n                         :mode \&quot;PostgreSQL\&quot; \n                         })&quot;, :offset 164, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test\&quot;\n                         ;:mode \&quot;PostgreSQL\&quot;\n                         })&quot;, :offset 164, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:datasource {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test\&quot;\n                         }})&quot;, :offset 133, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec  (hikari/make-datasource datasource-options))&quot;, :offset 58, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:adapter \&quot;h2\&quot;\n                         :url     \&quot;jdbc:h2:men:test\&quot;\n                         })&quot;, :offset 119, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec  {:datasource (hikari/make-datasource datasource-options)})&quot;, :offset 72, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db {:datasource (hikari/make-datasource {:url \&quot;jdbc:h2:men:test;create=true\&quot;})})&quot;, :offset 85, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db {:datasource (hikari/make-datasource {:adapter \&quot;h2\&quot; :url \&quot;jdbc:h2:men:test;create=true\&quot;})})&quot;, :offset 99, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db {:datasource (hikari/make-datasource {:adapter \&quot;h2\&quot; :url \&quot;jdbc:h2:~/test;create=true\&quot;})})&quot;, :offset 97, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/get-connection db)&quot;, :offset 24, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec {:datasource (hikari/make-datasource {:adapter \&quot;h2\&quot; :url \&quot;jdbc:h2:~/test;create=true\&quot;})})&quot;, :offset 102, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(hikari/close-datasource db-spec)&quot;, :offset 33, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(hikari/close-datasource @db-spec)&quot;, :offset 34, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec {:datasource (hikari/make-datasource {:adapter \&quot;h2\&quot; :url \&quot;jdbc:h2:~/test;create=true;MODE=PostgreSQLs;DATABASE_TO_LOWER=TRUE\&quot;})})&quot;, :offset 142, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec {:datasource (hikari/make-datasource {:adapter \&quot;h2\&quot; :url \&quot;jdbc:h2:~/test;create=true;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE\&quot;})})&quot;, :offset 141, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec {:datasource (hikari/make-datasource {:adapter \&quot;h2\&quot; :url \&quot;jdbc:h2:mem:test;create=tru;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE\&quot;})})&quot;, :offset 142, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec {:datasource (hikari/make-datasource {:adapter \&quot;h2\&quot; :url \&quot;jdbc:h2:mem:test;create=true;MODE=PsostgreSQL;DATABASE_TO_LOWER=TRUE\&quot;})})&quot;, :offset 144, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec {:datasource (hikari/make-datasource {:adapter \&quot;h2\&quot; :url \&quot;jdbc:h2:mem:test;create=true;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE\&quot;})})&quot;, :offset 143, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec {:datasource (hikari/make-datasource {:adapter \&quot;h2\&quot; :url \&quot;jdbc:h2:mem:foo;create=true;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE\&quot;})})&quot;, :offset 142, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/insert! db-spec :fruit {:name \&quot;cbc\&quot; :cost 1})&quot;, :offset 51, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query   db-spec [\&quot;SELECT * FROM fruit \&quot;])&quot;, :offset 47, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {\n                  \n                         :adapter            \&quot;postgresql\&quot;\n                         :username           \&quot;username\&quot;\n                         :password           \&quot;password\&quot;\n                         :database-name      \&quot;test\&quot;\n                         ;:port-number        5432\n                         }\n  )&quot;, :offset 348, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {\n\n                         :adapter            \&quot;postgresql\&quot;\n                         :username           \&quot;username\&quot;\n                         :password           \&quot;password\&quot;\n                         :database-name      \&quot;test\&quot;\n                         ;:port-number        5432\n                         }\n  )&quot;, :offset 330, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec {:datasource (hikari/make-datasource datasource-options)})&quot;, :offset 71, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {\n                         :auto-commit        true\n                         :read-only          false\n                         :connection-timeout 30000\n                         :validation-timeout 5000\n                         :idle-timeout       600000\n                         :max-lifetime       1800000\n                         :minimum-idle       10\n                         :maximum-pool-size  10\n                         :pool-name          \&quot;db-pool\&quot;\n                         :adapter            \&quot;postgresql\&quot;\n                         :username           \&quot;postgres\&quot;\n                         :password           \&quot;password\&quot;\n                         :database-name      \&quot;postgres\&quot;\n                         :server-name        \&quot;localhost\&quot;\n                         :port-number        5432\n                         :register-mbeans    false})&quot;, :offset 869, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(defonce datasource\n         (delay (hikari/make-datasource datasource-options)))&quot;, :offset 81, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def fruit-table-ddl\n  (jdbc/create-table-ddl :fruit\n                         [[:name \&quot;varchar(32)\&quot;]\n                          [:appearance \&quot;varchar(32)\&quot;]\n                          [:cost :int]\n                          [:grade :real]]))&quot;, :offset 237, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/db-do-commands db-spec\n                     [fruit-table-ddl\n                      \&quot;CREATE INDEX name_ix ON fruit ( name );\&quot;])&quot;, :offset 132, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(defonce db-spec\n         (delay (hikari/make-datasource datasource-options)))&quot;, :offset 78, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(defonce db-spec\n         (hikari/make-datasource datasource-options))&quot;, :offset 70, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/get-connection db-spec)&quot;, :offset 29, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:auto-commit        true\n                         :read-only          false\n                         :connection-timeout 30000\n                         :validation-timeout 5000\n                         :idle-timeout       600000\n                         :max-lifetime       1800000\n                         :minimum-idle       10\n                         :maximum-pool-size  10\n                         :pool-name          \&quot;db-pool\&quot;\n                         :adapter            \&quot;postgresql\&quot;\n                         :username           \&quot;username\&quot;\n                         :password           \&quot;password\&quot;\n                         :database-name      \&quot;database\&quot;\n                         :server-name        \&quot;localhost\&quot;\n                         :port-number        5432\n                         :register-mbeans    false})&quot;, :offset 843, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:auto-commit        true\n                         :read-only          false\n                         :connection-timeout 30000\n                         :validation-timeout 5000\n                         :idle-timeout       600000\n                         :max-lifetime       1800000\n                         :minimum-idle       10\n                         :maximum-pool-size  10\n                         :pool-name          \&quot;db-pool\&quot;\n                         :adapter            \&quot;postgresql\&quot;\n                         :username           \&quot;postgres\&quot;\n                         :password           \&quot;password\&quot;\n                         :database-name      \&quot;database\&quot;\n                         :server-name        \&quot;localhost\&quot;\n                         :port-number        5432\n                         :register-mbeans    false})&quot;, :offset 843, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:auto-commit        true\n                         :read-only          false\n                         :connection-timeout 30000\n                         :validation-timeout 5000\n                         :idle-timeout       600000\n                         :max-lifetime       1800000\n                         :minimum-idle       10\n                         :maximum-pool-size  10\n                         :pool-name          \&quot;db-pool\&quot;\n                         :adapter            \&quot;postgresql\&quot;\n                         :username           \&quot;postgres\&quot;\n                         :password           \&quot;password\&quot;\n                         :database-name      \&quot;postgres\&quot;\n                         :server-name        \&quot;localhost\&quot;\n                         :port-number        5432\n                         :register-mbeans    false})&quot;, :offset 843, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {:auto-commit        true\n                         :read-only          false\n                         :connection-timeout 30000\n                         :validation-timeout 5000\n                         :idle-timeout       600000\n                         :max-lifetime       1800000\n                         :minimum-idle       10\n                         :maximum-pool-size  10\n                         :pool-name          \&quot;db-pool\&quot;\n                         :adapter            \&quot;postgresql\&quot;\n                         :username           \&quot;postgres\&quot;\n                         :password           \&quot;password\&quot;\n                         :database-name      \&quot;postgres\&quot;\n                         :server-name        \&quot;localhost\&quot;\n                         :port-number        5432\n                         :db-pool \&quot;sa\&quot;\n                         :register-mbeans    false})&quot;, :offset 882, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {\n                         :jdbc-url \&quot;jdbc:postgresql://localhost:5432/postgres\&quot;\n                         ;:username           \&quot;postgres\&quot;\n                         ;:password           \&quot;password\&quot;\n                         ;:database-name      \&quot;postgres\&quot;\n                         ;:server-name        \&quot;localhost\&quot;\n                         ;:port-number        5432\n                         ;:db-pool \&quot;db-pool\&quot;\n                         ;:register-mbeans    false\n                         })&quot;, :offset 509, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/get-connection @db-spec)&quot;, :offset 30, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def datasource-options {\n                         :jdbc-url \&quot;jdbc:postgresql://localhost:5432/postgres?password=password&amp;username=postgres\&quot;\n                         ;:username           \&quot;postgres\&quot;\n                         ;:password           \&quot;password\&quot;\n                         ;:database-name      \&quot;postgres\&quot;\n                         ;:server-name        \&quot;localhost\&quot;\n                         ;:port-number        5432\n                         ;:db-pool \&quot;db-pool\&quot;\n                         ;:register-mbeans    false\n                         })&quot;, :offset 545, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec\n         (delay (hikari/make-datasource datasource-options)))&quot;, :offset 74, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(Class/forName \&quot;org.postgresql.Drive\&quot;)&quot;, :offset 38, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(Class/forName \&quot;org.postgresql.Driver\&quot;)&quot;, :offset 39, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec\n  {\n   ;:classname   \&quot;org.postgresql.Driver\&quot;\n   :subprotocol \&quot;postgresql\&quot;\n   :subname     \&quot;//127.0.0.1:5432/postgres\&quot;\n   :user        \&quot;postgres\&quot;\n   :password    \&quot;password\&quot;})&quot;, :offset 186, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(= \&quot;postgresql://localhost:5432/postgres\&quot; (str \&quot;jdbc:\&quot; (:subprotocol db-spec) \&quot;:\&quot; (:subname db-spec)))&quot;, :offset 102, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;\&quot;jdbc:postgresql://localhost:5432/postgres\&quot;&quot;, :offset 43, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(str \&quot;jdbc:\&quot; (:subprotocol db-spec) \&quot;:\&quot; (:subname db-spec))&quot;, :offset 59, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec\n  {\n   ;:classname   \&quot;org.postgresql.Driver\&quot;\n   :subprotocol \&quot;postgres\&quot;\n   :subname     \&quot;//localhost:5432/postgres\&quot;\n   :user        \&quot;postgres\&quot;\n   :password    \&quot;password\&quot;})&quot;, :offset 184, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec\n  {\n   ;:classname   \&quot;org.postgresql.Driver\&quot;\n   :subprotocol \&quot;postgresql\&quot;\n   :subname     \&quot;//localhost:5432/postgres\&quot;\n   :user        \&quot;postgres\&quot;\n   :password    \&quot;password\&quot;})&quot;, :offset 186, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(= \&quot;jdbc:postgresql://localhost:5432/postgres\&quot; (str \&quot;jdbc:\&quot; (:subprotocol db-spec) \&quot;:\&quot; (:subname db-spec)))&quot;, :offset 107, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def db-spec\n  {\n   :classname   \&quot;org.postgresql.Driver\&quot;\n   :subprotocol \&quot;postgresql\&quot;\n   :subname     \&quot;//localhost:5432/postgres\&quot;\n   :user        \&quot;postgres\&quot;\n   :password    \&quot;password\&quot;})&quot;, :offset 185, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(defn pool\n  [spec]\n  (let [cpds (doto (ComboPooledDataSource.)\n               (.setDriverClass (:classname spec))\n               (.setJdbcUrl (str \&quot;jdbc:\&quot; (:subprotocol spec) \&quot;:\&quot; (:subname spec)))\n               (.setUser (:user spec))\n               (.setPassword (:password spec))\n               )\n        ]\n    {:datasource cpds}))&quot;, :offset 335, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def pooled-db (delay (pool db-spec)))&quot;, :offset 38, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(defn db-connection [] @pooled-db)&quot;, :offset 34, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/get-connection (db-connection))&quot;, :offset 37, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;SELECT * FROM allocations\&quot;])&quot;, :offset 50, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;SELECT * FROM order_lines\&quot;])&quot;, :offset 50, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;SELECT * FROM batches \&quot;])&quot;, :offset 47, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b,  json_agg(a) as allocation\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  where b.id = 65\n  group by b.id\&quot;])&quot;, :offset 218, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id,  json_agg(a) as allocation\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  where b.id = 65\n  group by b.id\&quot;])&quot;, :offset 221, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id,  json_agg(a) as allocation\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  group by b.id\&quot;])&quot;, :offset 203, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b,  json_agg(a) as allocation\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  group by b.id\&quot;])&quot;, :offset 200, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id b.reference,  json_agg(a) as allocation\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  group by b.id\&quot;])&quot;, :offset 215, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(time (insert-batch batch-with-allocations))&quot;, :offset 44, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id, b.reference,  json_agg(a) as allocation\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  group by b.id\&quot;])&quot;, :offset 216, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id, b.reference, b.sku, b.quantity, b.eta, ol.sku\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  group by b.id\&quot;])&quot;, :offset 222, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id, b.reference, b.sku, b.quantity, b.eta, ol.sku\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  \&quot;])&quot;, :offset 209, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id, b.reference, b.sku, b.quantity, b.eta, ol.sku, SUM\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  group by b.id\&quot;])&quot;, :offset 227, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id, b.reference, b.sku, b.quantity, b.eta, ol.sku, SUM()\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  group by b.id\&quot;])&quot;, :offset 229, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id, b.reference, b.sku, b.quantity, b.eta, ol.sku, COUNT(ol.id)\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  group by b.id\&quot;])&quot;, :offset 236, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(jdbc/query db-spec [\&quot;select b.id, b.reference, b.sku, b.quantity, b.eta,  array_agg(ol) as allocations\n  from batches  as b inner join allocations a on b.id = a.batch_id\n  inner  join order_lines ol on ol.id = a.order_line_id\n  group by b.id\&quot;])&quot;, :offset 245, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(def a ({:id 1,\n         :sku \&quot;GENERIC-SOFA\&quot;,\n         :quantity 12,\n         :order_id \&quot;order1\&quot;}))&quot;, :offset 99, :ns &quot;architecture-patterns-with-clojure.repository-test&quot;} {:command &quot;(def a '({:id 1,\n         :sku \&quot;GENERIC-SOFA\&quot;,\n         :quantity 12,\n         :order_id \&quot;order1\&quot;}))&quot;, :offset 100, :ns &quot;architecture-patterns-with-clojure.repository-test&quot;} {:command &quot;(let [id a]\n  (println id))&quot;, :offset 27, :ns &quot;architecture-patterns-with-clojure.repository-test&quot;} {:command &quot;(let [{:keys [id]} a]\n  (println id))&quot;, :offset 37, :ns &quot;architecture-patterns-with-clojure.repository-test&quot;} {:command &quot;(let [[{:keys [id]}] a]\n  (println id))&quot;, :offset 39, :ns &quot;architecture-patterns-with-clojure.repository-test&quot;} {:command &quot;(let [[{id :id}] a]\n  (println id))&quot;, :offset 35, :ns &quot;architecture-patterns-with-clojure.repository-test&quot;} {:command &quot;(-&gt; a (let [[{id :id}] a]\n           (println id))\n    )&quot;, :offset 56, :ns &quot;architecture-patterns-with-clojure.repository-test&quot;} {:command &quot;(-&gt; a first\n    )&quot;, :offset 17, :ns &quot;architecture-patterns-with-clojure.repository-test&quot;} {:command &quot;(-&gt; a first :id\n    )&quot;, :offset 21, :ns &quot;architecture-patterns-with-clojure.repository-test&quot;}], :remote []}}</component>
  <component name="RunManager" selected="clojure.test.Test architecture-patterns-with-clojure.sync-test/determine-actions">
    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
      <option name="arquillianRunConfiguration">
        <value>
          <option name="containerStateName" value="" />
        </value>
      </option>
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="REPL for architecture-patterns-with-clojure" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <setting name="displayName" value="REPL for architecture-patterns-with-clojure" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="Run tests in architecture-patterns-with-clojure.sync-test" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="namespace" value="architecture-patterns-with-clojure.sync-test" />
      <option name="selector" value="SINGLE_NS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.batches_test/test-batches" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.batches_test/test-batches" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.sync-test/determine-action" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.sync-test/determine-action" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.sync-test/determine-actions" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.sync-test/determine-actions" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.sync-test/determine-actions" />
        <item itemvalue="clojure.test.Run tests in architecture-patterns-with-clojure.sync-test" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.sync-test/determine-action" />
        <item itemvalue="Clojure REPL.REPL for architecture-patterns-with-clojure" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.batches_test/test-batches" />
      </list>
    </recent_temporary>
  </component>
  <component name="SQLScriptSettings">
    <option name="matrix">
      <map>
        <entry key="POSTGRES.CreateComplete" value="CreateIfNotExists=1" />
      </map>
    </option>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="af2dc864-8d5e-48bd-889f-a48ed9712f5c" name="Default Changelist" comment="" />
      <created>1624736489572</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1624736489572</updated>
      <workItem from="1624736490822" duration="60000" />
      <workItem from="1624736569607" duration="2093000" />
      <workItem from="1624738688365" duration="27330000" />
      <workItem from="1624833676964" duration="4441000" />
      <workItem from="1624918654038" duration="1985000" />
      <workItem from="1624925128169" duration="3876000" />
      <workItem from="1624929556891" duration="11016000" />
      <workItem from="1624968549520" duration="3753000" />
      <workItem from="1625055661264" duration="6409000" />
      <workItem from="1625373029569" duration="1409000" />
      <workItem from="1625400488046" duration="1289000" />
      <workItem from="1625423035465" duration="30588000" />
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
</project>