<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="af2dc864-8d5e-48bd-889f-a48ed9712f5c" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/adapters/repository.clj" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/domain/order.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dataSources/6ea62715-bee4-4543-959c-beae2dcf56a3.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/6ea62715-bee4-4543-959c-beae2dcf56a3.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__commons_codec_1_11.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_tools_reader_0_10_0.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__potemkin_0_4_4.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/architecture-patterns-with-clojure.iml" beforeDir="false" afterPath="$PROJECT_DIR$/architecture-patterns-with-clojure.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/database.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/adapters/database.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/model.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/repository.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/util/date.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/util/date.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/batches_test.clj" beforeDir="false" afterPath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/unit/batches_test.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/fixtures.clj" beforeDir="false" afterPath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/fixtures.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/model_test.clj" beforeDir="false" afterPath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/unit/product_test.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/repository_test.clj" beforeDir="false" afterPath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/integration/repository_test.txt" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Test Namespace" />
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="GitToolBoxStore">
    <option name="recentBranches">
      <RecentBranches>
        <option name="branchesForRepo">
          <list>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="repository" />
                    <option name="lastUsedInstant" value="1624838632" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1624838376" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="domain_model" />
                    <option name="lastUsedInstant" value="1624838191" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$" />
            </RecentBranchesForRepo>
          </list>
        </option>
      </RecentBranches>
    </option>
  </component>
  <component name="ProjectId" id="1uV2ZLwKAU97S5glI4YAYgUtTtk" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="foldersAlwaysOnTop" value="false" />
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showVisibilityIcons" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="DatabaseDriversLRU" value="h2&#10;postgresql" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="cursive.last.file.extension./home/felipe/cursos/functional-programing/clojure/architecture-patterns-with-clojure/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/src/architecture_patterns_with_clojure/domain" />
    <property name="settings.editor.selected.configurable" value="database.main" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure/e2e" />
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure/integration" />
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure/unit" />
      <recent name="$PROJECT_DIR$/src/architecture_patterns_with_clojure/config" />
      <recent name="$PROJECT_DIR$/src/architecture_patterns_with_clojure/entrypoints" />
    </key>
  </component>
  <component name="ReplState" timestamp="1629643255853">{:repl-history {:ide [], :local [{:command &quot;(hash-file \&quot;src/architecture_patterns_with_clojure/test.txts\&quot;)&quot;, :offset 62, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt; (slurp path)\n       (.getBytes \&quot;utf-8\&quot;)\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       )\n  )&quot;, :offset 134, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(str (hash-file \&quot;src/architecture_patterns_with_clojure/test.txt\&quot;))&quot;, :offset 67, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.getBytes \&quot;utf8\&quot;)&quot;, :offset 18, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.getBytes \&quot;utf8\&quot; \&quot;asasa\&quot;)&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.getBytes \&quot;sasa\&quot; \&quot;utf8\&quot; )&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt; (slurp path)\n       (.getBytes \&quot;utf8\&quot;)\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       )\n  )&quot;, :offset 132, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt; (slurp path)\n       (.getBytes (partial \&quot;utf8\&quot;))\n      \n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       )\n  )&quot;, :offset 150, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt; (slurp path)\n       (partial (.getBytes  \&quot;utf8\&quot; ))\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       )\n  )&quot;, :offset 145, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt; (slurp path)\n       (partial (.getBytes ) \&quot;utf8\&quot;)\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       )\n  )&quot;, :offset 144, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt; \n       (.getBytes (slurp path)  \&quot;utf8\&quot; )\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       )\n  )&quot;, :offset 136, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt;\n       (.getBytes (slurp path)  \&quot;utf8\&quot; )\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       (java.math.BigInteger. 1)\n       (format \&quot;%x\&quot;)\n       )\n  )&quot;, :offset 189, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(def directory (clojure.java.io/file \&quot;./src\&quot;))&quot;, :offset 46, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt; (slurp path)\n       (partial (.getBytes))\n       (\&quot;utf8\&quot;)\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       (BigInteger. 1)\n       (format \&quot;%x\&quot;)))&quot;, :offset 185, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt; (slurp path)\n       (partial (.getBytes))\n       \&quot;utf8\&quot;\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       (BigInteger. 1)\n       (format \&quot;%x\&quot;)))&quot;, :offset 183, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt; (slurp path)\n       (partial (.getBytes))\n       (partial \&quot;utf8\&quot;)\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       (BigInteger. 1)\n       (format \&quot;%x\&quot;)))&quot;, :offset 193, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn hash-file [path]\n  (-&gt;&gt; (slurp path)\n       (.getBytes)\n       (partial \&quot;utf8\&quot;)\n       (.digest (MessageDigest/getInstance \&quot;SHA1\&quot;))\n       (BigInteger. 1)\n       (format \&quot;%x\&quot;)))&quot;, :offset 183, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(slurp path)&quot;, :offset 12, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(hash-file \&quot;src/architecture_patterns_with_clojure/test.txt\&quot;)&quot;, :offset 61, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.listFiles)&quot;, :offset 12, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.listFiles \&quot;\&quot;)&quot;, :offset 15, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.isDirectory)&quot;, :offset 14, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(ns architecture-patterns-with-clojure.sync\n  (:require [clojure.java.io :as io])\n  (:import (java.security MessageDigest)\n           java.io.File))&quot;, :offset 148, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.isDirectory \&quot;.\&quot;)&quot;, :offset 18, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn my-ls [d]\n  (println \&quot;Files in \&quot; (.getName d))\n  (doseq [f (.listFiles d)]\n    (if (.isDirectory f)\n      (print \&quot;d \&quot;)\n      (print \&quot;- \&quot;))\n    (println (.getName f))))&quot;, :offset 173, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(my-ls \&quot;.\&quot;)&quot;, :offset 11, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(my-ls (File. \&quot;.\&quot;))&quot;, :offset 19, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.listFiles (File. \&quot;.\&quot;))&quot;, :offset 24, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.isDirectory (File. \&quot;.\&quot;))&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.isDirectory (File. \&quot;./src/architecture_patterns_with_clojure/test.txt\&quot;))&quot;, :offset 74, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.isDirectory (File. \&quot;./src/architecture_patterns_with_clojurea\&quot;))&quot;, :offset 66, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.isDirectory (File. \&quot;./src/architecture_patterns_with_clojure\&quot;))&quot;, :offset 65, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(.isDirectory (File. \&quot;./src/architecture_patterns_with_clojureasasa\&quot;))&quot;, :offset 70, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(doseq [f (take 200 files)]\n  (if (.isDirectory f)\n    (print \&quot;d \&quot;)\n    (print \&quot;- \&quot;))\n  (println (.getName f)))&quot;, :offset 111, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(take 200 files)&quot;, :offset 16, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(doseq [f (take 200 files)]\n  (hash-file f))&quot;, :offset 44, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(doseq [f (take 200 files)]\n  (if (.isDirectory f)\n    {}\n    (hash-file f)\n    )\n  )&quot;, :offset 85, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(doseq [f (take 200 files)]\n  (if (.isDirectory f)\n    f\n    (hash-file f)\n    )\n  )&quot;, :offset 84, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(doseq [f (take 200 files)]\n  (if (.isDirectory f)\n    1\n    (hash-file f)\n    )\n  )&quot;, :offset 84, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn sync [source, dest]\n  (let [directory (io/file source)\n        files (file-seq directory)]\n    (reduce\n      (fn [acc, curr] (if (.isDirectory curr) acc (assoc acc (hash-file curr) curr)))\n      {}\n      files\n      )))&quot;, :offset 225, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn sync-f [source, dest]\n  (let [directory (io/file source)\n        files (file-seq directory)]\n    (reduce\n      (fn [acc, curr] (if (.isDirectory curr) acc (assoc acc (hash-file curr) curr)))\n      {}\n      files\n      )))&quot;, :offset 227, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(sync-f \&quot;.src\&quot; \&quot;\&quot;)&quot;, :offset 18, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(sync-f \&quot;./src\&quot; \&quot;\&quot;)&quot;, :offset 19, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn read_paths_and_hashes [root]\n  (let [directory (io/file root)\n        files (file-seq directory)]\n    (reduce\n      (fn [acc, curr] (if (.isDirectory curr) acc (assoc acc (keyword (hash-file curr)) (.getName curr))))\n      {}\n      files\n      )))&quot;, :offset 253, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;  ;(let [directory (io/file root)\n  ;      files (file-seq directory)]\n  ;  (reduce\n  ;    (fn [acc, curr] (if (.isDirectory curr) acc (assoc acc (keyword (hash-file curr)) (.getName curr))))\n  ;    {}\n  ;    files\n  ;    )\n  ;  )&quot;, :offset 230, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn read_paths_and_hashes [root]\n  (-&gt;&gt; root \n       (io/file)\n       (file-seq)\n       (reduce\n         (fn [acc, curr] (if (.isDirectory curr) acc (assoc acc (keyword (hash-file curr)) (.getName curr))))\n         {}\n         ))\n  \n  ;(let [directory (io/file root)\n  ;      files (file-seq directory)]\n  ;  (reduce\n  ;    (fn [acc, curr] (if (.isDirectory curr) acc (assoc acc (keyword (hash-file curr)) (.getName curr))))\n  ;    {}\n  ;    files\n  ;    )\n  ;  )\n  )&quot;, :offset 469, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn read_paths_and_hashes [root]\n  (-&gt;&gt; root\n       (io/file)\n       (file-seq)\n       (reduce\n         (fn [hashes, curr]\n           (if (.isDirectory curr)\n             hashes\n             (assoc hashes (keyword (hash-file curr)) (.getName curr))))\n         {}\n         )))&quot;, :offset 277, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn read_paths_and_hashes [root]\n  (-&gt;&gt; root\n       (io/file)\n       (file-seq)\n       (reduce\n         (fn [hashes, file]\n           (if (.isDirectory file)\n             hashes\n             (assoc hashes (keyword (hash-file file)) (.getName file))))\n         {}\n         )))&quot;, :offset 277, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(:9930e75e56a0775a8583ce3a23b9bad98f901658 (read_paths_and_hashes \&quot;./src\&quot;))&quot;, :offset 75, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(str (:9930e75e56a0775a8583ce3a23b9bad98f901658 (read_paths_and_hashes \&quot;./src\&quot;)))&quot;, :offset 81, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(read_paths_and_hashes \&quot;./src\&quot;)&quot;, :offset 31, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(cond\n  true \&quot;asas\&quot;\n  :whatever \&quot;You can use any default keyword\&quot;)&quot;, :offset 66, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(cond\n  nil \&quot;ola\&quot;\n  true \&quot;asas\&quot;\n  :whatever \&quot;You can use any default keyword\&quot;)&quot;, :offset 78, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn read_paths_and_hashes [root]\n  (-&gt;&gt; root\n       (io/file)\n       (file-seq)\n       (reduce\n         (fn [hashes, file]\n           (if (.isDirectory file)\n             hashes\n             (assoc hashes (keyword (hash-file file)) (.getName file)))) {})))&quot;, :offset 258, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(:asa (read_paths_and_hashes \&quot;./src\&quot;))&quot;, :offset 38, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(first (read_paths_and_hashes \&quot;./src\&quot;))&quot;, :offset 39, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(doseq [x [-1 0 1]\n        y [1  2 3]]\n  (prn (* x y)))&quot;, :offset 55, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(for [x [-1 0 1]\n        y [1  2 3]]\n  (prn (* x y)))&quot;, :offset 53, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(doseq [x [-1 0 1]\n        y [1  2 3]]\n   (* x y))&quot;, :offset 50, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(for [x [-1 0 1]\n        y [1  2 3]]\n   (* x y))&quot;, :offset 48, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(for [x [\&quot;abc\&quot;]\n        y [\&quot;test\&quot; \&quot;ola\&quot;]]\n   (io/file x y))&quot;, :offset 59, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(io/file \&quot;./src/architecture_patterns_with_clojure/test.txt\&quot; \&quot;ola\&quot;)&quot;, :offset 67, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(str (io/file \&quot;./src/architecture_patterns_with_clojure/test.txt\&quot; \&quot;ola\&quot;))&quot;, :offset 73, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (sha dest_hashes)) (conj actions [\&quot;COPY\&quot; (for [path [filename]\n                                                                      file [source_folder dest_folder]]\n                                                                  (io/file path file))])\n                 )\n               ) [] source_hashes)\n  )&quot;, :offset 476, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(determine-actions {:hash1 \&quot;fn1\&quot;} {} \&quot;src\&quot; \&quot;dst\&quot;)&quot;, :offset 49, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (get dest_hashes sha)) (conj actions (\&quot;COPY\&quot; (for [path [filename]\n                                                                          file [source_folder dest_folder]]\n                                                                      (io/file path file))))\n                 )\n               ) [] source_hashes)\n  )&quot;, :offset 488, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (get dest_hashes sha)) (conj actions [\&quot;COPY\&quot; (for [path [filename]\n                                                                      file [source_folder dest_folder]]\n                                                                  (io/file path file))])\n                 )\n               ) [] source_hashes)\n  )&quot;, :offset 480, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (get dest_hashes sha)) (conj actions [\&quot;COPY\&quot; (for [path [filename]\n                                                                      file [source_folder dest_folder]]\n                                                                  (io/file path file))])\n                 )\n               ) list source_hashes)\n  )&quot;, :offset 482, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (get dest_hashes sha)) (conj actions [\&quot;COPY\&quot; (for [path [filename]\n                                                                      file [source_folder dest_folder]]\n                                                                  (io/file path file))])\n                 )\n               ) '() source_hashes)\n  )&quot;, :offset 481, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (get dest_hashes sha)) (conj actions [\&quot;COPY\&quot; (for [file [filename]\n                                                                          path [source_folder dest_folder]]\n                                                                      (io/file path file))])\n                 )\n               ) '() source_hashes)\n  )&quot;, :offset 489, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (get dest_hashes sha)) (conj actions [\&quot;COPY\&quot; (for [file [filename]\n                                                                          path [source_folder dest_folder]]\n                                                                      (str (io/file path file)))])\n                 )\n               ) '() source_hashes)\n  )&quot;, :offset 495, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (get dest_hashes sha)) (conj actions '(\&quot;COPY\&quot; (for [file [filename]\n                                                                           path [source_folder dest_folder]]\n                                                                       (str (io/file path file)))))\n                 )\n               ) [] source_hashes)\n  )&quot;, :offset 497, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (get dest_hashes sha)) (conj actions (concat [\&quot;COPY\&quot;] (for [file [filename]\n                                                                           path [source_folder dest_folder]]\n                                                                       (str (io/file path file)))))\n                 )\n               ) [] source_hashes)\n  )&quot;, :offset 505, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(!= 1 1)&quot;, :offset 8, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn determine-actions [source_hashes dest_hashes source_folder dest_folder]\n\n  (reduce-kv (fn [actions sha filename]\n               (cond\n                 (nil? (get dest_hashes sha)) (conj actions (concat [\&quot;COPY\&quot;] (for [file [filename]\n                                                                                   path [source_folder dest_folder]]\n                                                                               (str (io/file path file)))))\n                 (not= (get dest_hashes sha) filename)\n                 (conj actions (concat [\&quot;MOVE\&quot;] (for [path [dest_folder]\n                                                      file [(get dest_hashes sha) filename]]\n                                                  (str (io/file path file)))))\n                 )\n               ) [] source_hashes)\n  )&quot;, :offset 821, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(determine-actions {\&quot;hash1\&quot; \&quot;fn1\&quot;} {} \&quot;src\&quot; \&quot;dst\&quot;)&quot;, :offset 50, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(doseq [x [1 2 3] ](println x))&quot;, :offset 31, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(let [[a b] (for [file [\&quot;asa\&quot;]\n                  path [\&quot;b\&quot; \&quot;c\&quot;]]\n              (str (io/file path file)))]\n  a)&quot;, :offset 111, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(let [[a b] (for [file [\&quot;asa\&quot;]\n                  path [\&quot;b\&quot; \&quot;c\&quot;]]\n              (str (io/file path file)))]\n  b)&quot;, :offset 111, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(let [[a b] (for [file [\&quot;asa\&quot;]\n                  path [\&quot;b\&quot; \&quot;c\&quot;]]\n              (str (io/file path file)))]\n  (\&quot;COPY\&quot; a b))&quot;, :offset 122, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(let [[a b] (for [file [\&quot;asa\&quot;]\n                  path [\&quot;b\&quot; \&quot;c\&quot;]]\n              (str (io/file path file)))]\n  '(\&quot;COPY\&quot; a b))&quot;, :offset 123, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(let [[a b] (for [file [\&quot;asa\&quot;]\n                  path [\&quot;b\&quot; \&quot;c\&quot;]]\n              (str (io/file path file)))]\n   [\&quot;COPY\&quot; a b])&quot;, :offset 123, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(let [[a b] (for [file [\&quot;asa\&quot;]\n                  path [\&quot;b\&quot; \&quot;c\&quot;]]\n              (str (io/file path file)))]\n  (list \&quot;COPY\&quot; a b))&quot;, :offset 127, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;[ (1 2 3)]&quot;, :offset 10, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;[ '(1 2 3)]&quot;, :offset 11, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (conj '()))&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (conj '(1 2)))&quot;, :offset 29, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (concat '()))&quot;, :offset 28, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (concat '(1 2 3)))&quot;, :offset 33, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (into ()))&quot;, :offset 25, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (into (1 2 )))&quot;, :offset 29, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (into (1 2  3)))&quot;, :offset 31, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (into '(1 2  3)))&quot;, :offset 32, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (conj '(1 2  3)))&quot;, :offset 32, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(-&gt; ['(1 2 3)] (conj []))&quot;, :offset 25, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn do-stuff\n  [coll {:keys [map-fn max-num-things batch-size]}]\n  (cond-&gt; coll\n           map-fn         (map map-fn)\n           max-num-things (take max-num-things)\n           batch-size     (partition batch-size)))&quot;, :offset 219, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(defn do-stuff\n  [coll {:keys [map-fn max-num-things batch-size]}]\n  (cond-&gt;&gt; coll\n           map-fn         (map map-fn)\n           max-num-things (take max-num-things)\n           batch-size     (partition batch-size)))&quot;, :offset 220, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(do-stuff [1 2 3 4] {:map-fn str :batch-size 2})&quot;, :offset 48, :ns &quot;architecture-patterns-with-clojure.sync&quot;} {:command &quot;(if (nil? @server)\n   (do (println \&quot;Server starts\&quot;) (start-dev))\n   (restart))&quot;, :offset 78, :ns &quot;architecture-patterns-with-clojure.api&quot;} {:command &quot;(stop-dev)&quot;, :offset 10, :ns &quot;architecture-patterns-with-clojure.api&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.REPL for architecture-patterns-with-clojure">
    <configuration name="REPL for architecture-patterns-with-clojure" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <setting name="displayName" value="REPL for architecture-patterns-with-clojure" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="Run tests in architecture-patterns-with-clojure.repository-test" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="namespace" value="architecture-patterns-with-clojure.repository-test" />
      <option name="selector" value="SINGLE_NS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.api-test/test-allocate" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.api-test/test-allocate" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.batches_test/test-batches" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.batches_test/test-batches" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.repository-test/test-repository" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.repository-test/test-repository" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for architecture-patterns-with-clojure" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.api-test/test-allocate" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.batches_test/test-batches" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.repository-test/test-repository" />
        <item itemvalue="clojure.test.Run tests in architecture-patterns-with-clojure.repository-test" />
      </list>
    </recent_temporary>
  </component>
  <component name="SQLScriptSettings">
    <option name="matrix">
      <map>
        <entry key="POSTGRES.CreateComplete" value="CreateIfNotExists=1" />
      </map>
    </option>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="af2dc864-8d5e-48bd-889f-a48ed9712f5c" name="Default Changelist" comment="" />
      <created>1624736489572</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1624736489572</updated>
      <workItem from="1624736490822" duration="60000" />
      <workItem from="1624736569607" duration="2093000" />
      <workItem from="1624738688365" duration="27330000" />
      <workItem from="1624833676964" duration="4441000" />
      <workItem from="1624918654038" duration="1985000" />
      <workItem from="1624925128169" duration="3876000" />
      <workItem from="1624929556891" duration="11016000" />
      <workItem from="1624968549520" duration="3753000" />
      <workItem from="1625055661264" duration="6409000" />
      <workItem from="1625373029569" duration="1409000" />
      <workItem from="1625400488046" duration="1289000" />
      <workItem from="1625423035465" duration="15885000" />
      <workItem from="1626372351494" duration="4572000" />
      <workItem from="1626484821722" duration="301000" />
      <workItem from="1626734078929" duration="2474000" />
      <workItem from="1626736711983" duration="1000" />
      <workItem from="1626833689751" duration="194000" />
      <workItem from="1627780863183" duration="2281000" />
      <workItem from="1627784121954" duration="1645000" />
      <workItem from="1627817206950" duration="18000" />
      <workItem from="1627840272907" duration="25461000" />
      <workItem from="1629242024535" duration="44000" />
      <workItem from="1629306911643" duration="12405000" />
      <workItem from="1629379637121" duration="646000" />
      <workItem from="1629457366553" duration="26782000" />
      <workItem from="1629566724744" duration="15510000" />
      <workItem from="1629633970264" duration="9011000" />
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
</project>