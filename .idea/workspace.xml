<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="af2dc864-8d5e-48bd-889f-a48ed9712f5c" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__clj_time_0_15_1.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__clj_tuple_0_2_2.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__clojure_complete_0_2_5.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__clojure_humanize_0_2_2.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__colorize_0_1_1.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_andrewmcveigh_cljs_time_0_4_0.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_h2database_h2_1_4_200.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_mchange_c3p0_0_9_5_2.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_mchange_mchange_commons_java_0_2_11.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_rpl_specter_1_0_5.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__environ_1_1_0.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__fipp_0_6_17.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__flare_0_2_9.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__io_aviso_pretty_0_1_37.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__joda_time_2_10.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__marick_suchwow_6_0_2.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__midje_1_9_9.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__mvxcvi_arrangement_1_2_0.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__mvxcvi_puget_1_1_2.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__nrepl_0_6_0.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__nubank_matcher_combinators_1_5_1.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojars_brenton_google_diff_match_patch_0_1.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_clojure_1_10_1.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_core_rrb_vector_0_0_14.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_core_specs_alpha_0_2_44.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_core_unify_0_5_7.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_java_classpath_0_2_3.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_java_jdbc_0_7_12.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_math_combinatorics_0_1_6.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_math_numeric_tower_0_0_4.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_spec_alpha_0_2_176.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_test_check_0_10_0_alpha3.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_tools_macro_0_1_5.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_tools_namespace_0_3_0.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_postgresql_postgresql_42_1_4.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_tcrawley_dynapath_1_0_0.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__riddley_0_1_12.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__slingshot_0_12_2.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/architecture-patterns-with-clojure.iml" beforeDir="false" afterPath="$PROJECT_DIR$/architecture-patterns-with-clojure.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/adapters/repository.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/adapters/repository.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/domain/events.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/domain/events.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/domain/product.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/domain/product.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/entrypoints/api.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/entrypoints/api.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/service_layer/handlers.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/service_layer/handlers.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/service_layer/message_bus.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/architecture_patterns_with_clojure/service_layer/message_bus.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/e2e/api_test.text" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/unit/handler_test.clj" beforeDir="false" afterPath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/unit/handler_test.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/unit/product_test.clj" beforeDir="false" afterPath="$PROJECT_DIR$/test/architecture_patterns_with_clojure/unit/product_test.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
        <option value="Clojure Test Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="GitToolBoxStore">
    <option name="recentBranches">
      <RecentBranches>
        <option name="branchesForRepo">
          <list>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="repository" />
                    <option name="lastUsedInstant" value="1624838632" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1624838376" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="domain_model" />
                    <option name="lastUsedInstant" value="1624838191" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$" />
            </RecentBranchesForRepo>
          </list>
        </option>
      </RecentBranches>
    </option>
  </component>
  <component name="ProjectId" id="1uV2ZLwKAU97S5glI4YAYgUtTtk" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="foldersAlwaysOnTop" value="false" />
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showVisibilityIcons" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="DatabaseDriversLRU" value="h2&#10;postgresql" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="cursive.last.file.extension./home/felipe/cursos/functional-programing/clojure/architecture-patterns-with-clojure/src" value="clj" />
    <property name="cursive.last.file.extension./home/felipe/cursos/functional-programing/clojure/architecture-patterns-with-clojure/test" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../learn-clojureScript/my-cljs-project" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="settings.editor.selected.configurable" value="preferences.language.Kotlin" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure" />
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure/e2e" />
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure/integration" />
      <recent name="$PROJECT_DIR$/test/architecture_patterns_with_clojure/unit" />
      <recent name="$PROJECT_DIR$/src/architecture_patterns_with_clojure/config" />
    </key>
  </component>
  <component name="ReplState" timestamp="1630723154134">{:repl-history {:ide [], :local [{:command &quot;(ok \&quot;da\&quot; 12131)&quot;, :offset 15, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ok \&quot;da\&quot; :asa 121)&quot;, :offset 18, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(name \&quot;as\&quot;)&quot;, :offset 11, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(name out-of-stock)&quot;, :offset 19, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(typ (out-of-stock \&quot;asa\&quot;))&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(typ (BatchCreated \&quot;asa\&quot;))&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(typ (batch-created \&quot;asa\&quot;))&quot;, :offset 27, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defprotocol Event)&quot;, :offset 19, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(out-of-stock \&quot;asa\&quot;)&quot;, :offset 20, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(class (out-of-stock \&quot;asa\&quot;))&quot;, :offset 28, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(bases (out-of-stock \&quot;asa\&quot;))&quot;, :offset 28, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(isa? (out-of-stock \&quot;asa\&quot;) Event)&quot;, :offset 33, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(supers (out-of-stock \&quot;asa\&quot;) )&quot;, :offset 30, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(instance? (out-of-stock \&quot;asa\&quot;) Event)&quot;, :offset 38, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(instance? (class (out-of-stock \&quot;asa\&quot;)) Event)&quot;, :offset 46, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(isa? (class (out-of-stock \&quot;asa\&quot;)) Event)&quot;, :offset 41, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(parents (out-of-stock \&quot;asa\&quot;) )&quot;, :offset 31, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ancestors (out-of-stock \&quot;asa\&quot;) )&quot;, :offset 33, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(defprotocol Event\n  (nothing [this]))&quot;, :offset 38, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ancestors (out-of-stock \&quot;asa\&quot;))&quot;, :offset 32, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ancestors Bird)&quot;, :offset 16, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ancestors (class (out-of-stock \&quot;asa\&quot;)))&quot;, :offset 40, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(satisfies? (out-of-stock \&quot;asa\&quot;) Event)&quot;, :offset 39, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(satisfies? Event (BatchQuantityChanged \&quot;asa\&quot;))&quot;, :offset 47, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(extend-protocol Event\n  OutOfStock\n  (opa [this] :event))&quot;, :offset 58, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(opa (out-of-stock \&quot;asa\&quot;))&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(type (out-of-stock \&quot;asa\&quot;))&quot;, :offset 27, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(satisfies? Event (type (out-of-stock \&quot;asa\&quot;)))&quot;, :offset 46, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(satisfies? Event (class (out-of-stock \&quot;asa\&quot;)))&quot;, :offset 47, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(satisfies? Event  (out-of-stock \&quot;asa\&quot;))&quot;, :offset 40, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(satisfies? Event (out-of-stock \&quot;asa\&quot;))&quot;, :offset 39, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(satisfies? Event (batch-quantity-changed \&quot;asa\&quot;))&quot;, :offset 49, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(doseq [x [1 0 2]] (/ 1 x))&quot;, :offset 27, :ns &quot;architecture-patterns-with-clojure.domain.events&quot;} {:command &quot;(ns architecture-patterns-with-clojure.service-layer.message-bus\n  ;(:require [architecture-patterns-with-clojure.service-layer.handlers :as handlers])\n  ;(:import (architecture_patterns_with_clojure.domain.events\n  ;           OutOfStock BatchCreated AllocationRequired))\n  (:require [architecture-patterns-with-clojure.domain.events :as events]\n            [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout take! put!]]))&quot;, :offset 518, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(defmulti event-handlers class)&quot;, :offset 31, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defn handle-event [event &amp; dependencies]\n  (doseq [f (event-handlers event)] (apply f event dependencies)))&quot;, :offset 108, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defn handle [messages &amp; dep]\n  (let [msg (first messages)]\n    (when msg\n      (if (satisfies? events/Event msg)\n        (apply handle-event msg dep)\n        (handle-event msg))\n      ;(doseq [f (event-handlers msg)] (apply f msg dep))\n      (recur (rest messages) dep))\n    )\n  )&quot;, :offset 281, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(+ 1 2)&quot;, :offset 7, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(loop []\n  (let [channel (chan)]\n    (if (= 3 (take! channel (fn [x] (println x) x)))\n      (do (println \&quot;bye\&quot;) (close! channel))\n      (do (println \&quot;number wrong\&quot;) (recur)))\n    ))&quot;, :offset 181, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(go-loop []\n  (let [x (&lt;! c)]\n    (println \&quot;Got a value in this loop:\&quot; x))\n  (recur))&quot;, :offset 85, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(go-loop []\n  (let [x (&lt;! c)]\n    (println \&quot;Got a value in this loop2:\&quot; x)\n    (&gt;! c (str \&quot;toma de volta \&quot; x)))\n  (recur))&quot;, :offset 122, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(&lt;!! c)&quot;, :offset 7, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(put! c \&quot;ola1\&quot;)&quot;, :offset 15, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(put! c \&quot;ola\&quot;)&quot;, :offset 14, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(put! c 0)&quot;, :offset 10, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(put! c 1)&quot;, :offset 10, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(start)&quot;, :offset 7, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(-&gt; Allocate println)&quot;, :offset 21, :ns &quot;architecture-patterns-with-clojure.domain.commands&quot;} {:command &quot;(-&gt; Allocate 1 println)&quot;, :offset 23, :ns &quot;architecture-patterns-with-clojure.domain.commands&quot;} {:command &quot;(-&gt; Allocate  println)&quot;, :offset 22, :ns &quot;architecture-patterns-with-clojure.domain.commands&quot;} {:command &quot;(-&gt; Allocate  (. 1 2 3))&quot;, :offset 24, :ns &quot;architecture-patterns-with-clojure.domain.commands&quot;} {:command &quot;(-&gt; Allocate  (. ))&quot;, :offset 19, :ns &quot;architecture-patterns-with-clojure.domain.commands&quot;} {:command &quot;(-&gt; Allocate  .)&quot;, :offset 16, :ns &quot;architecture-patterns-with-clojure.domain.commands&quot;} {:command &quot;(ns architecture-patterns-with-clojure.service-layer.message-bus\n  ;(:require [architecture-patterns-with-clojure.service-layer.handlers :as handlers])\n  ;(:import (architecture_patterns_with_clojure.domain.events\n  ;           OutOfStock BatchCreated AllocationRequired))\n  (:require [architecture-patterns-with-clojure.domain.events :as events]\n            [clojure.core.async :refer [put! go-loop &lt;! sub chan pub!]]))&quot;, :offset 420, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;\n(defmulti foo class)\n(defmethod foo ::collection [c] :a-collection)\n(defmethod foo String [s] :a-string)\n&quot;, :offset 106, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(foo [])&quot;, :offset 8, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(defmethod foo String [s] :a-string)\n&quot;, :offset 37, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(foo \&quot;bar\&quot;)\n&quot;, :offset 12, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(foo (java.util.HashMap.))&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(class [])&quot;, :offset 10, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(ns architecture-patterns-with-clojure.service-layer.message-bus\n  ;(:require [architecture-patterns-with-clojure.service-layer.handlers :as handlers])\n  ;(:import (architecture_patterns_with_clojure.domain.events\n  ;           OutOfStock BatchCreated AllocationRequired))\n  (:require [architecture-patterns-with-clojure.domain.events :as events]\n            [clojure.core.async :refer [put! go-loop &lt;! sub chan pub]]))&quot;, :offset 419, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(clojure.core.async/close! architecture-patterns-with-clojure.service-layer.message-bus/event-ch)&quot;, :offset 97, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(subscribe! :ola println)&quot;, :offset 25, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(architecture-patterns-with-clojure.service-layer.message-bus/emit! {:type :ola })&quot;, :offset 82, :ns &quot;architecture-patterns-with-clojure.service-layer.message-bus&quot;} {:command &quot;(run-dev)&quot;, :offset 9, :ns &quot;architecture-patterns-with-clojure.entrypoints.api&quot;} {:command &quot;(server/stop run-dev)&quot;, :offset 21, :ns &quot;architecture-patterns-with-clojure.entrypoints.api&quot;} {:command &quot;(server/stop (run-dev))&quot;, :offset 23, :ns &quot;architecture-patterns-with-clojure.entrypoints.api&quot;} {:command &quot;(let [[op &amp; args] [assoc \&quot;id-1\&quot;  {}]]\n  (println op args))&quot;, :offset 58, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(ns architecture-patterns-with-clojure.e2e.api-test\n  (:require [clojure.test :refer [deftest is]]\n            [io.pedestal.test :refer [response-for]]\n            [architecture-patterns-with-clojure.entrypoints.api :as api])\n  )&quot;, :offset 229, :ns &quot;architecture-patterns-with-clojure.core&quot;} {:command &quot;(parse-json {:ola \&quot;mundo\&quot;})&quot;, :offset 27, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;(stringify {:ola \&quot;mundo\&quot;})&quot;, :offset 26, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt;  (interc stringify)) {:ola \&quot;mundo\&quot;})&quot;, :offset 41, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt;  (interc stringify) interc) {:ola \&quot;mundo\&quot;})&quot;, :offset 48, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt;  (interc stringify) parse interc) {:ola \&quot;mundo\&quot;})&quot;, :offset 54, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt;  (interc stringify) parse ) {:ola \&quot;mundo\&quot;})&quot;, :offset 48, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt;  (interc stringify) ) {:ola \&quot;mundo\&quot;})&quot;, :offset 42, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt;  stringify interc (fn [f] (fn [data]  (f data)))) {:ola \&quot;mundo\&quot;})&quot;, :offset 70, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt;  stringify interc ) {:ola \&quot;mundo\&quot;})&quot;, :offset 40, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; stringify interc) {:ola \&quot;mundo\&quot;})&quot;, :offset 38, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt;  interc inter2)   {:ola \&quot;mundo\&quot;})&quot;, :offset 38, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; stringify interc inter2)   {:ola \&quot;mundo\&quot;})&quot;, :offset 47, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; constantly interc inter2)   {:ola \&quot;mundo\&quot;})&quot;, :offset 48, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; identity interc inter2)   {:ola \&quot;mundo\&quot;})&quot;, :offset 46, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; identity interc inter2 inter3)   {:ola \&quot;mundo\&quot;})&quot;, :offset 53, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; identity interc  inter3 inter2)   {:ola \&quot;mundo\&quot;})&quot;, :offset 54, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;(clojure.string/upper-case {:pla \&quot;asa\&quot;})&quot;, :offset 40, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; identity interc  inter3 )   {:ola \&quot;mundo\&quot;})&quot;, :offset 48, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; identity interc  inter3  inter2)   {:ola \&quot;mundo\&quot;})&quot;, :offset 55, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; identity   inter3  interc inter2)   {:ola \&quot;mundo\&quot;})&quot;, :offset 56, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; identity   inter3   inter2 interc)   {:ola \&quot;mundo\&quot;})&quot;, :offset 57, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;((-&gt; identity  interc inter3   inter2 )   {:ola \&quot;mundo\&quot;})&quot;, :offset 57, :ns &quot;architecture-patterns-with-clojure.util.json&quot;} {:command &quot;(ns architecture-patterns-with-clojure.e2e.api-test\n  (:require [clojure.test :refer [deftest is]]\n            [io.pedestal.test :refer [response-for]]\n            [io.pedestal.http :as bootstrap]\n            [clojure.string :as str]\n            [architecture-patterns-with-clojure.entrypoints.api :as api])\n  )&quot;, :offset 311, :ns &quot;architecture-patterns-with-clojure.e2e.api-test&quot;} {:command &quot;(parse \&quot;2011-01-06\&quot;)&quot;, :offset 20, :ns &quot;architecture-patterns-with-clojure.util.date&quot;} {:command &quot;(parse \&quot;2011/01/06\&quot;)&quot;, :offset 20, :ns &quot;architecture-patterns-with-clojure.util.date&quot;} {:command &quot;(parse \&quot;2018-12-30T19:34:50.63\&quot;)&quot;, :offset 32, :ns &quot;architecture-patterns-with-clojure.util.date&quot;} {:command &quot;(defn parse [date-string] (LocalDate/parse date-string))&quot;, :offset 56, :ns &quot;architecture-patterns-with-clojure.util.date&quot;} {:command &quot;(parse \&quot;2018-12-30T1\&quot;)&quot;, :offset 22, :ns &quot;architecture-patterns-with-clojure.util.date&quot;} {:command &quot;(parse \&quot;2018-12-30\&quot;)&quot;, :offset 20, :ns &quot;architecture-patterns-with-clojure.util.date&quot;} {:command &quot;(def serv (run-dev))&quot;, :offset 20, :ns &quot;architecture-patterns-with-clojure.entrypoints.server&quot;} {:command &quot;(server/stop serv)&quot;, :offset 18, :ns &quot;architecture-patterns-with-clojure.entrypoints.server&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.REPL for architecture-patterns-with-clojure">
    <configuration name="REPL for architecture-patterns-with-clojure" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <setting name="displayName" value="REPL for architecture-patterns-with-clojure" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="Run tests in architecture-patterns-with-clojure.unit.handler-test" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="namespace" value="architecture-patterns-with-clojure.unit.handler-test" />
      <option name="selector" value="SINGLE_NS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.api-test/test-allocate" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.api-test/test-allocate" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.batches_test/test-batches" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.batches_test/test-batches" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test architecture-patterns-with-clojure.e2e.api-test/happy-path-returns-201-and-allocated-batch" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="architecture-patterns-with-clojure" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="architecture-patterns-with-clojure.e2e.api-test/happy-path-returns-201-and-allocated-batch" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for architecture-patterns-with-clojure" />
        <item itemvalue="clojure.test.Run tests in architecture-patterns-with-clojure.unit.handler-test" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.e2e.api-test/happy-path-returns-201-and-allocated-batch" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.api-test/test-allocate" />
        <item itemvalue="clojure.test.Test architecture-patterns-with-clojure.batches_test/test-batches" />
      </list>
    </recent_temporary>
  </component>
  <component name="SQLScriptSettings">
    <option name="matrix">
      <map>
        <entry key="POSTGRES.CreateComplete" value="CreateIfNotExists=1" />
      </map>
    </option>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="af2dc864-8d5e-48bd-889f-a48ed9712f5c" name="Default Changelist" comment="" />
      <created>1624736489572</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1624736489572</updated>
      <workItem from="1624736490822" duration="60000" />
      <workItem from="1624736569607" duration="2093000" />
      <workItem from="1624738688365" duration="27330000" />
      <workItem from="1624833676964" duration="4441000" />
      <workItem from="1624918654038" duration="1985000" />
      <workItem from="1624925128169" duration="3876000" />
      <workItem from="1624929556891" duration="11016000" />
      <workItem from="1624968549520" duration="3753000" />
      <workItem from="1625055661264" duration="6409000" />
      <workItem from="1625373029569" duration="1409000" />
      <workItem from="1625400488046" duration="1289000" />
      <workItem from="1625423035465" duration="15885000" />
      <workItem from="1626372351494" duration="4572000" />
      <workItem from="1626484821722" duration="301000" />
      <workItem from="1626734078929" duration="2474000" />
      <workItem from="1626736711983" duration="1000" />
      <workItem from="1626833689751" duration="194000" />
      <workItem from="1627780863183" duration="2281000" />
      <workItem from="1627784121954" duration="1645000" />
      <workItem from="1627817206950" duration="18000" />
      <workItem from="1627840272907" duration="25461000" />
      <workItem from="1629242024535" duration="44000" />
      <workItem from="1629306911643" duration="12405000" />
      <workItem from="1629379637121" duration="646000" />
      <workItem from="1629457366553" duration="26782000" />
      <workItem from="1629566724744" duration="15510000" />
      <workItem from="1629633970264" duration="35054000" />
      <workItem from="1629719845961" duration="33698000" />
      <workItem from="1629809603377" duration="21543000" />
      <workItem from="1629850473910" duration="136000" />
      <workItem from="1630534952705" duration="9383000" />
      <workItem from="1630588532158" duration="32268000" />
      <workItem from="1630662153241" duration="43221000" />
      <workItem from="1630760036799" duration="688000" />
      <workItem from="1630762619154" duration="1252000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName="Makefile" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="1d6a7a84-1324-4929-8633-d2cc8c48b370">
          <value>
            <State>
              <option name="CUSTOM_BOOLEAN_PROPERTIES">
                <map>
                  <entry key="Show.Git.Branches" value="true" />
                </map>
              </option>
              <option name="SHOW_ONLY_AFFECTED_CHANGES" value="true" />
              <option name="FILTERS">
                <map>
                  <entry key="branch">
                    <value>
                      <list>
                        <option value="HEAD" />
                      </list>
                    </value>
                  </entry>
                  <entry key="structure">
                    <value>
                      <list>
                        <option value="dir:/home/felipe/cursos/functional-programing/clojure/architecture-patterns-with-clojure/src" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
    <option name="OPEN_GENERIC_TABS">
      <map>
        <entry key="1d6a7a84-1324-4929-8633-d2cc8c48b370" value="TOOL_WINDOW" />
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>